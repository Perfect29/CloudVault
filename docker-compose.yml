services:
  postgres:
    image: postgres:15-alpine
    container_name: cloudvault-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cloudvault
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cloudvault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cloudvault"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cloudvault-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloudvault-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudvault-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/cloudvault
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/cloudvault
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: never
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      JWT_SECRET: cloudvault-jwt-secret-key-change-in-production-must-be-at-least-256-bits-long
      ALLOW_DEMO_ANY_PASSWORD: "true"
      STORAGE_TYPE: local
      LOCAL_STORAGE_PATH: /app/uploads
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173,http://frontend:3000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - file_uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - cloudvault-network
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/api/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 90s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: cloudvault-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api
      VITE_APP_NAME: CloudVault
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - ./index.html:/app/index.html:ro
      - ./vite.config.ts:/app/vite.config.ts:ro
      - ./tailwind.config.cjs:/app/tailwind.config.cjs:ro
      - ./postcss.config.cjs:/app/postcss.config.cjs:ro
    networks:
      - cloudvault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
  file_uploads:

networks:
  cloudvault-network:
    driver: bridge