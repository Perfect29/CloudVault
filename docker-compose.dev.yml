# Development-specific Docker Compose configuration
# Use this for local development with hot reloading and debugging

version: '3.8'

services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:15-alpine
    container_name: cloudvault-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: cloudvault
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - cloudvault-dev-network

  # Redis Cache (same as production)
  redis:
    image: redis:7-alpine
    container_name: cloudvault-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - cloudvault-dev-network

  # Spring Boot Backend (Development mode with hot reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: cloudvault-backend-dev
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/cloudvault
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      JWT_SECRET: cloudvault-jwt-secret-key-development-only
      STORAGE_TYPE: local
      LOCAL_STORAGE_PATH: /app/uploads
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173,http://frontend:3000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: true
    ports:
      - "8080:8080"
      - "35729:35729" # LiveReload port
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/pom.xml:/app/pom.xml:ro
      - file_uploads_dev:/app/uploads
      - ./backend/logs:/app/logs
      - maven_cache:/root/.m2
    networks:
      - cloudvault-dev-network

  # React Frontend (Development mode with HMR)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: cloudvault-frontend-dev
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=http://localhost:8080/api
      - VITE_APP_NAME=CloudVault Dev
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
      - "24678:24678" # Vite HMR port
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./index.html:/app/index.html
      - ./vite.config.ts:/app/vite.config.ts
      - ./tailwind.config.cjs:/app/tailwind.config.cjs
      - ./postcss.config.cjs:/app/postcss.config.cjs
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - node_modules:/app/node_modules
    networks:
      - cloudvault-dev-network

  # Database Admin Tool (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cloudvault-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cloudvault.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - cloudvault-dev-network
    profiles:
      - tools

  # Redis Admin Tool (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: cloudvault-redis-insight-dev
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - cloudvault-dev-network
    profiles:
      - tools

volumes:
  postgres_dev_data:
  redis_dev_data:
  file_uploads_dev:
  pgadmin_data:
  redis_insight_data:
  maven_cache:
  node_modules:

networks:
  cloudvault-dev-network:
    driver: bridge