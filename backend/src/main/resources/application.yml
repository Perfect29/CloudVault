spring:
  application:
    name: cloudvault-file-storage
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/cloudvault}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
      enabled: true
      file-size-threshold: 2KB
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  security:
    require-ssl: false

server:
  port: ${PORT:8080}
  servlet:
    context-path: /api
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param
    include-exception: false

# JWT Configuration
app:
  jwt:
    secret: ${JWT_SECRET:cloudvault-secret-key-change-in-production-must-be-at-least-256-bits}
    expiration: 86400000 # 24 hours in milliseconds
  auth:
    allow-demo-any-password: ${ALLOW_DEMO_ANY_PASSWORD:true}

# File Storage Configuration
file:
  storage:
    type: ${STORAGE_TYPE:local} # local or s3
    local:
      path: ${LOCAL_STORAGE_PATH:./uploads}
    s3:
      bucket: ${S3_BUCKET_NAME:cloudvault-files}
      region: ${AWS_REGION:us-east-1}
      access-key: ${AWS_ACCESS_KEY_ID:}
      secret-key: ${AWS_SECRET_ACCESS_KEY:}

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"
  allow-credentials: true

logging:
  level:
    com.cloudvault: INFO
    org.springframework.security: WARN
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized